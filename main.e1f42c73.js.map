{"version":3,"sources":["scripts/main.js"],"names":["columnsTable","rowsTable","score","emptyCellsClass","table","gameField","document","querySelector","rowsList","children","scoreField","button","messageStart","messageWin","messageLose","setGame","i","k","setDefaultClass","classList","showNumber","number","innerText","remove","add","hasEmptyCell","setNumbers","found","r","Math","floor","random","c","checkStep","filterZero","rowFilter","filter","num","slide","rowSlide","row","length","push","slideLeft","tableRow","slideRight","reverse","slideUp","slideDown","addEventListener","e","target","hidden","replace","code"],"mappings":";AAAA,aAEA,IAAMA,EAAe,EACfC,EAAY,EACdC,EAAQ,EACNC,EAAkB,aACpBC,EAAQ,CACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGNC,EAAYC,SAASC,cAAc,eACnCC,EAAWH,EAAUI,SAAS,GAAGA,SACjCC,EAAaJ,SAASC,cAAc,eACpCI,EAASL,SAASC,cAAc,WAChCK,EAAeN,SAASC,cAAc,kBACtCM,EAAaP,SAASC,cAAc,gBACpCO,EAAcR,SAASC,cAAc,iBAyD3C,SAASQ,IACF,IAAIC,IAAAA,EAAAA,SAAAA,GACF,IAAIC,IAAAA,EAAAA,SAAAA,GACDC,IAAAA,EAAkB,WACtBV,EAASQ,GAAGP,SAASQ,GAAGE,UAAYhB,GAEhCiB,EAAa,SAACC,GAClBb,EAASQ,GAAGP,SAASQ,GAAGK,UAAYD,GAGlB,IAAhBjB,EAAMY,GAAGC,IACXC,IACAE,EAAW,MAEPhB,EAAMY,GAAGC,IAAM,MACjBJ,EAAWM,UAAUI,OAAO,UAE9BL,IACAE,EAAWhB,EAAMY,GAAGC,IAEpBT,EAASQ,GAAGP,SAASQ,GAAGE,UAAUK,IAAmBpB,eAAAA,OAAAA,EAAMY,GAAGC,OAlBzDA,EAAI,EAAGA,EAAIjB,EAAciB,IAAzBA,EAAAA,IADFD,EAAI,EAAGA,EAAIf,EAAWe,IAAtBA,EAAAA,GAwBTN,EAAWY,UAAYpB,EAGzB,SAASuB,IACF,IAAA,IAAIT,EAAI,EAAGA,EAAIf,EAAWe,IACxB,IAAA,IAAIC,EAAI,EAAGA,EAAIjB,EAAciB,IAC5Bb,GAAgB,IAAhBA,EAAMY,GAAGC,GACJ,OAAA,EAKN,OAAA,EAGT,SAASS,IACH,GAACD,IAUE,IAFHE,IAAAA,GAAQ,GAEJA,GAAO,CACPC,IAAAA,EAAIC,KAAKC,MAAMD,KAAKE,SAAW9B,GAC/B+B,EAAIH,KAAKC,MAAMD,KAAKE,SAAW/B,GAEjB,IAAhBI,EAAMwB,GAAGI,KACPH,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EACnC3B,EAAMwB,GAAGI,GAAK,EAEd5B,EAAMwB,GAAGI,GAAK,EAGhBjB,IACAY,GAAQ,QArBLM,KACHnB,EAAYK,UAAUI,OAAO,UAyBnC,SAASW,EAAWC,GACXA,OAAAA,EAAUC,OAAO,SAAAC,GAAOA,OAAQ,IAARA,IAGjC,SAASC,EAAMC,GAGR,IAFDC,IAAAA,EAAMN,EAAWK,GAEZvB,EAAI,EAAGA,EAAIwB,EAAIC,OAAQzB,IAC1BwB,EAAIxB,KAAOwB,EAAIxB,EAAI,KACrBwB,EAAIxB,IAAM,EACVwB,EAAIxB,EAAI,GAAK,EACbd,GAASsC,EAAIxB,IAMVwB,IAFPA,EAAMN,EAAWM,GAEVA,EAAIC,OAASzC,GAClBwC,EAAIE,KAAK,GAGJF,OAAAA,EAGT,SAASG,IACF,IAAA,IAAI3B,EAAI,EAAGA,EAAIf,EAAWe,IAAK,CAC9B4B,IAAAA,EAAWxC,EAAMY,GAErB4B,EAAWN,EAAMM,GACjBxC,EAAMY,GAAK4B,EAEX7B,KAIJ,SAAS8B,IACF,IAAA,IAAI7B,EAAI,EAAGA,EAAIf,EAAWe,IAAK,CAC9B4B,IAAAA,EAAWxC,EAAMY,GAErB4B,EAASE,WACTF,EAAWN,EAAMM,IACRE,UACT1C,EAAMY,GAAK4B,EAEX7B,KAIJ,SAASgC,IACF,IAAA,IAAI/B,EAAI,EAAGA,EAAIhB,EAAcgB,IAAK,CACjC4B,IAAAA,EAAW,CAACxC,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,IAEhE4B,EAAWN,EAAMM,GAEZ,IAAA,IAAI3B,EAAI,EAAGA,EAAIhB,EAAWgB,IAC7Bb,EAAMa,GAAGD,GAAK4B,EAAS3B,GAGzBF,KAIJ,SAASiC,IACF,IAAA,IAAIhC,EAAI,EAAGA,EAAIhB,EAAcgB,IAAK,CACjC4B,IAAAA,EAAW,CAACxC,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,GAAIZ,EAAM,GAAGY,IAEhE4B,EAASE,WACTF,EAAWN,EAAMM,IACRE,UAEJ,IAAA,IAAI7B,EAAI,EAAGA,EAAIhB,EAAWgB,IAC7Bb,EAAMa,GAAGD,GAAK4B,EAAS3B,GAGzBF,KAIJ,SAASkB,IACF,IAAA,IAAIjB,EAAI,EAAGA,EAAIf,EAAWe,IACxB,IAAA,IAAIC,EAAI,EAAGA,EAAIjB,EAAciB,IAAK,CACjCb,GAAAA,EAAMY,EAAI,GAAGC,EAAI,KAAOb,EAAMY,EAAI,GAAGC,GAChC,OAAA,EAGLb,GAAAA,EAAMa,EAAI,GAAGD,EAAI,KAAOZ,EAAMa,GAAGD,EAAI,GAChC,OAAA,EAKN,OAAA,EAtNTL,EAAOsC,iBAAiB,QAAS,SAACC,GACL,UAAvBA,EAAEC,OAAO7B,WACXI,IACAA,IACAX,IAEAF,EAAWM,UAAUK,IAAI,UACzBZ,EAAawC,QAAS,EACtBF,EAAEC,OAAO7B,UAAY,QACrB4B,EAAEC,OAAOhC,UAAUkC,QAAQ,QAAS,YACJ,UAAvBH,EAAEC,OAAO7B,YAClBpB,EAAQ,EAERE,EAAQ,CACN,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGZW,IACAD,EAAYK,UAAUK,IAAI,UAC1BZ,EAAawC,QAAS,EACtBvC,EAAWM,UAAUK,IAAI,UACzB0B,EAAEC,OAAO7B,UAAY,QACrB4B,EAAEC,OAAOhC,UAAUkC,QAAQ,UAAW,YAI1C/C,SAAS2C,iBAAiB,QAAS,SAACC,GAC9BvC,GAAqB,UAArBA,EAAOW,UACD4B,OAAAA,EAAEI,MACH,IAAA,YACHX,IACAjB,IACA,MAEG,IAAA,aACHmB,IACAnB,IACA,MAEG,IAAA,UACHqB,IACArB,IACA,MAEG,IAAA,YACHsB,IACAtB","file":"main.e1f42c73.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst columnsTable = 4;\nconst rowsTable = 4;\nlet score = 0;\nconst emptyCellsClass = 'field-cell';\nlet table = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nconst gameField = document.querySelector('.game-field');\nconst rowsList = gameField.children[0].children;\nconst scoreField = document.querySelector('.game-score');\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', (e) => {\n  if (e.target.innerText === 'Start') {\n    setNumbers();\n    setNumbers();\n    setGame();\n\n    messageWin.classList.add('hidden');\n    messageStart.hidden = true;\n    e.target.innerText = 'Reset';\n    e.target.classList.replace('start', 'restart');\n  } else if (e.target.innerText === 'Reset') {\n    score = 0;\n\n    table = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    setGame();\n    messageLose.classList.add('hidden');\n    messageStart.hidden = false;\n    messageWin.classList.add('hidden');\n    e.target.innerText = 'Start';\n    e.target.classList.replace('restart', 'start');\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (button.innerText === 'Reset') {\n    switch (e.code) {\n      case 'ArrowLeft':\n        slideLeft();\n        setNumbers();\n        break;\n\n      case 'ArrowRight':\n        slideRight();\n        setNumbers();\n        break;\n\n      case 'ArrowUp':\n        slideUp();\n        setNumbers();\n        break;\n\n      case 'ArrowDown':\n        slideDown();\n        setNumbers();\n        break;\n    }\n  }\n});\n\nfunction setGame() {\n  for (let i = 0; i < rowsTable; i++) {\n    for (let k = 0; k < columnsTable; k++) {\n      const setDefaultClass = () => {\n        rowsList[i].children[k].classList = emptyCellsClass;\n      };\n      const showNumber = (number) => {\n        rowsList[i].children[k].innerText = number;\n      };\n\n      if (table[i][k] === 0) {\n        setDefaultClass();\n        showNumber('');\n      } else {\n        if (table[i][k] >= 2048) {\n          messageWin.classList.remove('hidden');\n        };\n        setDefaultClass();\n        showNumber(table[i][k]);\n\n        rowsList[i].children[k].classList.add(`field-cell--${table[i][k]}`);\n      }\n    }\n  };\n\n  scoreField.innerText = score;\n};\n\nfunction hasEmptyCell() {\n  for (let i = 0; i < rowsTable; i++) {\n    for (let k = 0; k < columnsTable; k++) {\n      if (table[i][k] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nfunction setNumbers() {\n  if (!hasEmptyCell()) {\n    if (!checkStep()) {\n      messageLose.classList.remove('hidden');\n    }\n\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rowsTable);\n    const c = Math.floor(Math.random() * columnsTable);\n\n    if (table[r][c] === 0) {\n      if (Math.floor(Math.random() * 10) < 9) {\n        table[r][c] = 2;\n      } else {\n        table[r][c] = 4;\n      }\n\n      setGame();\n      found = true;\n    }\n  }\n};\n\nfunction filterZero(rowFilter) {\n  return rowFilter.filter(num => num !== 0);\n};\n\nfunction slide(rowSlide) {\n  let row = filterZero(rowSlide);\n\n  for (let i = 0; i < row.length; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columnsTable) {\n    row.push(0);\n  }\n\n  return row;\n};\n\nfunction slideLeft() {\n  for (let i = 0; i < rowsTable; i++) {\n    let tableRow = table[i];\n\n    tableRow = slide(tableRow);\n    table[i] = tableRow;\n\n    setGame();\n  }\n};\n\nfunction slideRight() {\n  for (let i = 0; i < rowsTable; i++) {\n    let tableRow = table[i];\n\n    tableRow.reverse();\n    tableRow = slide(tableRow);\n    tableRow.reverse();\n    table[i] = tableRow;\n\n    setGame();\n  }\n};\n\nfunction slideUp() {\n  for (let i = 0; i < columnsTable; i++) {\n    let tableRow = [table[0][i], table[1][i], table[2][i], table[3][i]];\n\n    tableRow = slide(tableRow);\n\n    for (let k = 0; k < rowsTable; k++) {\n      table[k][i] = tableRow[k];\n    }\n\n    setGame();\n  }\n};\n\nfunction slideDown() {\n  for (let i = 0; i < columnsTable; i++) {\n    let tableRow = [table[0][i], table[1][i], table[2][i], table[3][i]];\n\n    tableRow.reverse();\n    tableRow = slide(tableRow);\n    tableRow.reverse();\n\n    for (let k = 0; k < rowsTable; k++) {\n      table[k][i] = tableRow[k];\n    }\n\n    setGame();\n  }\n};\n\nfunction checkStep() {\n  for (let i = 1; i < rowsTable; i++) {\n    for (let k = 1; k < columnsTable; k++) {\n      if (table[i - 1][k - 1] === table[i - 1][k]) {\n        return true;\n      };\n\n      if (table[k - 1][i - 1] === table[k][i - 1]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}